substitutions:
  name: lumentree-modbus
  device_description: "Monitor and control a Lumentree inverter via RS232 (Modbus)"
  tx_pin: GPIO16
  rx_pin: GPIO17

esphome:
  name: ${name}
  comment: ${device_description}
  min_version: 2024.6.0
  project:
    name: "syssi.esphome-lumentree"
    version: 1.0.0

esp32:
  board: wemos_d1_mini32
  framework:
    type: esp-idf

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

ota:
  platform: esphome

logger:
  level: INFO

# If you use Home Assistant please remove this `mqtt` section and uncomment the `api` component!
# The native API has many advantages over MQTT: https://esphome.io/components/api.html#advantages-over-mqtt
mqtt:
  broker: !secret mqtt_host
  username: !secret mqtt_username
  password: !secret mqtt_password
  id: mqtt_client

# api:

uart:
  - id: uart_0
    baud_rate: 9600
    tx_pin: ${tx_pin}
    rx_pin: ${rx_pin}

modbus:
  - id: modbus0
    uart_id: uart_0
    send_wait_time: 200ms

modbus_controller:
  - id: lumentree0
    address: 0x01
    modbus_id: modbus0
    command_throttle: 200ms
    update_interval: 10s

time:
  - platform: sntp

sensor:
  - platform: total_daily_energy
    name: "${name} PV energy today"
    restore: true
    icon: mdi:counter
    power_id: lumentree0_pv_power
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    unit_of_measurement: kWh

  - platform: template
    name: "${name} battery discharging power"
    id: lumentree0_discharging_power
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    icon: mdi:battery-arrow-down
    # Gets updated on value of lumentree0_battery_power
    update_interval: never
    lambda: |-
      if (isnan(id(lumentree0_battery_power).state)) {
        return {};
      }
      auto power = id(lumentree0_battery_power).state;
      return (power < 0.0f) ? -power : 0.0f;

  - platform: template
    name: "${name} battery charging power"
    id: lumentree0_charging_power
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    icon: mdi:battery-charging
    # Gets updated on value of lumentree0_battery_power
    update_interval: never
    lambda: |-
      if (isnan(id(lumentree0_battery_power).state)) {
        return {};
      }
      auto power = id(lumentree0_battery_power).state;
      return (power > 0.0f) ? power : 0.0f;

  # === Core Lumentree Modbus Registers ===

  # AC Output Voltage                            0.1V     Int   13 1 R (0x0D)
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} ac output voltage"
    address: 13
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 1
    icon: mdi:sine-wave
    filters:
      - multiply: 0.1

  # IGBT Temperature                             (x-1000)/10    Int   24 1 R (0x18)
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} device temperature"
    address: 24
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "Â°C"
    device_class: temperature
    state_class: measurement
    accuracy_decimals: 1
    icon: mdi:thermometer
    lambda: |-
      return (x - 1000.0f) / 10.0f;

  # AC Output Power                              1W       Int   18 1 R (0x12)
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} ac power"
    id: lumentree0_ac_power
    address: 18
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0
    icon: mdi:power-plug

  # === Extended Lumentree Status Registers (from BLE implementation) ===

  # Battery Voltage                              0.01V    Int   11 1 R (0x0B)
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} battery voltage"
    address: 11
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 2
    icon: mdi:battery
    filters:
      - multiply: 0.01

  # Battery Current                              0.01A    Int   12 1 R (0x0C)
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} battery current"
    address: 12
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 2
    icon: mdi:current-dc
    filters:
      - multiply: 0.01

  # PV Input Voltage                             1V       Int   20 1 R (0x14)
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} pv voltage"
    address: 20
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 0
    icon: mdi:solar-power

  # PV Input Power                               1W       Int   22 1 R (0x16)
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} pv power"
    id: lumentree0_pv_power
    address: 22
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0
    icon: mdi:solar-power

  # Battery State of Charge                      1%       Int   50 1 R (0x32)
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} battery state of charge"
    address: 50
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "%"
    device_class: battery
    state_class: measurement
    accuracy_decimals: 0
    icon: mdi:battery

  # Battery Status (Register 37: 0=Normal, 2=No Battery, etc.)
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} battery status"
    address: 37
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 0
    state_class: measurement
    entity_category: diagnostic
    icon: mdi:battery-check

  # Grid Connection Status (Register 70: Raw value)
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} grid connection status"
    address: 70
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 0
    state_class: measurement
    entity_category: diagnostic
    icon: mdi:transmission-tower

  # Grid Input Power (signed)                    1W       Int   53 1 R (0x35)
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} grid power"
    id: lumentree0_grid_power
    address: 53
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0
    icon: mdi:transmission-tower

  # Battery Power (signed)                       1W       Int   61 1 R (0x3D)
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} battery power"
    id: lumentree0_battery_power
    address: 61
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0
    icon: mdi:battery
    on_value:
      - component.update: lumentree0_discharging_power
      - component.update: lumentree0_charging_power

  # Family Load Power                            1W       Int   67 1 R (0x43)
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} load power"
    address: 67
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0
    icon: mdi:home-lightning-bolt

  # AC Input Voltage                             0.1V     Int   15 1 R (0x0F)
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} ac input voltage"
    address: 15
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 1
    icon: mdi:sine-wave
    filters:
      - multiply: 0.1

  # AC Output Frequency                          0.01Hz   Int   16 1 R (0x10)
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} ac output frequency"
    address: 16
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "Hz"
    device_class: frequency
    state_class: measurement
    accuracy_decimals: 2
    icon: mdi:sine-wave
    filters:
      - multiply: 0.01

  # AC Input Frequency                           0.01Hz   Int   17 1 R (0x11)
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} ac input frequency"
    address: 17
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "Hz"
    device_class: frequency
    state_class: measurement
    accuracy_decimals: 2
    icon: mdi:sine-wave
    filters:
      - multiply: 0.01

  # PV2 Input Voltage                            1V       Int   72 1 R (0x48)
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} pv2 voltage"
    address: 72
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 0
    icon: mdi:solar-power

  # PV2 Input Power                              1W       Int   74 1 R (0x4A)
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} pv2 power"
    address: 74
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0
    icon: mdi:solar-power

  # AC Output Apparent Power                     1VA      Int   58 1 R (0x3A)
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} ac output apparent power"
    address: 58
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "VA"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0
    icon: mdi:power-plug

  # Grid CT Power                                1W       Int   59 1 R (0x3B)
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} grid ct power"
    address: 59
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0
    icon: mdi:transmission-tower

  # Grid Export Power                            1W       Int   54 1 R (0x36)
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} grid export"
    address: 54
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0
    icon: mdi:transmission-tower-export

  # Device Power Rating Code                     -        Int   8 1 R (0x08)
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} device power rating code"
    id: lumentree0_device_power_rating_code
    address: 8
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 0
    state_class: measurement
    entity_category: diagnostic
    icon: mdi:information

  # Device Power Rating (derived from code)
  - platform: template
    name: "${name} device power rating"
    lambda: |-
      if (id(lumentree0_device_power_rating_code).has_state()) {
        uint16_t code = (uint16_t) id(lumentree0_device_power_rating_code).state;
        switch (code) {
          case 2: return 5500.0f; // 5.5KW
          case 3: return 4000.0f; // 4.0KW
          case 5: return 6000.0f; // 6.0KW
          default: return 3600.0f; // 3.6KW default
        }
      }
      return {};
    unit_of_measurement: "W"
    device_class: power
    accuracy_decimals: 0
    state_class: measurement
    entity_category: diagnostic
    icon: mdi:information

  # === Daily Energy Statistics (Function 0x04 - Input Registers) ===

  # Today PV Production                          0.1kWh   Int   0 1 R (Function 0x04)
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} today pv production"
    address: 0
    register_type: read
    value_type: U_WORD
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 1
    icon: mdi:solar-power
    filters:
      - multiply: 0.1

  # Today Essential Load                         0.1kWh   Int   1 1 R (Function 0x04)
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} today essential load"
    address: 1
    register_type: read
    value_type: U_WORD
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 1
    icon: mdi:home-lightning-bolt
    filters:
      - multiply: 0.1

  # Today Grid Consumption                       0.1kWh   Int   2 1 R (Function 0x04)
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} today grid consumption"
    address: 2
    register_type: read
    value_type: U_WORD
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 1
    icon: mdi:transmission-tower
    filters:
      - multiply: 0.1

  # Today Total Consumption                      0.1kWh   Int   3 1 R (Function 0x04)
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} today total consumption"
    address: 3
    register_type: read
    value_type: U_WORD
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 1
    icon: mdi:home-lightning-bolt
    filters:
      - multiply: 0.1

  # Today Battery Charging                       0.1kWh   Int   4 1 R (Function 0x04)
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} today battery charging"
    address: 4
    register_type: read
    value_type: U_WORD
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 1
    icon: mdi:battery-charging
    filters:
      - multiply: 0.1

  # Today Battery Discharge                      0.1kWh   Int   5 1 R (Function 0x04)
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} today battery discharge"
    address: 5
    register_type: read
    value_type: U_WORD
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 1
    icon: mdi:battery-arrow-down
    filters:
      - multiply: 0.1

  # === Configuration Registers (101-157) ===

  # Equalization Voltage                         V*100    2B    101 1 R/W
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} equalization voltage setting"
    address: 101
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    device_class: voltage
    accuracy_decimals: 2
    icon: mdi:battery-high
    filters:
      - multiply: 0.01

  # Charging Target Voltage                      V*100    2B    102 1 R/W
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} charging target voltage setting"
    address: 102
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    device_class: voltage
    accuracy_decimals: 2
    icon: mdi:battery-charging
    filters:
      - multiply: 0.01

  # Float Charge Voltage                         V*100    2B    103 1 R/W
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} float charge voltage setting"
    address: 103
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    device_class: voltage
    accuracy_decimals: 2
    icon: mdi:battery
    filters:
      - multiply: 0.01

  # Battery Capacity                             Ah       1B    104 1 R/W
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} battery capacity setting"
    address: 104
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "Ah"
    accuracy_decimals: 0
    icon: mdi:battery-outline

binary_sensor:
  # Battery Connected Status (Register 37: 2=No Battery, others=Connected)
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} battery connected"
    address: 37
    register_type: holding
    lambda: |-
      return x != 2.0f;
    device_class: connectivity
    icon: mdi:battery-check

  # Grid Connected Status (Register 70: >=7 Connected, <7 Disconnected)
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} grid connected"
    address: 70
    register_type: holding
    lambda: |-
      return x >= 7.0f;
    device_class: connectivity
    icon: mdi:transmission-tower

text_sensor:
  # Operation Mode (Register 68)
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} operation mode"
    address: 68
    register_type: holding
    lambda: |-
      uint16_t mode = data[0];
      switch (mode) {
        case 0: return std::string("Battery Mode");
        case 1: return std::string("Hybrid Mode");
        case 2: return std::string("Grid-Tie Mode");
        default: return std::string("Unknown (0x" + std::to_string(mode) + ")");
      }
    icon: mdi:state-machine

number:
  # Set Power Output                             W        40 1 W
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} power output setting"
    use_write_multiple: true
    address: 40
    register_type: holding
    value_type: U_WORD
    min_value: 0.0
    max_value: 2000.0
    step: 1
    unit_of_measurement: "W"
    icon: mdi:solar-power

  # Equalization Voltage Setting                V*100    2B    101 1 R/W
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} equalization voltage setting"
    use_write_multiple: true
    address: 101
    register_type: holding
    value_type: U_WORD
    min_value: 48.0
    max_value: 60.0
    step: 0.01
    unit_of_measurement: "V"
    icon: mdi:battery-high
    lambda: "return x * 0.01f;"
    write_lambda: |-
      return x * 100.0f;

  # Charging Target Voltage Setting             V*100    2B    102 1 R/W
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} charging target voltage setting"
    use_write_multiple: true
    address: 102
    register_type: holding
    value_type: U_WORD
    min_value: 48.0
    max_value: 58.0
    step: 0.01
    unit_of_measurement: "V"
    icon: mdi:battery-charging
    lambda: "return x * 0.01f;"
    write_lambda: |-
      return x * 100.0f;

  # Float Charge Voltage Setting                V*100    2B    103 1 R/W
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} float charge voltage setting"
    use_write_multiple: true
    address: 103
    register_type: holding
    value_type: U_WORD
    min_value: 48.0
    max_value: 56.0
    step: 0.01
    unit_of_measurement: "V"
    icon: mdi:battery
    lambda: "return x * 0.01f;"
    write_lambda: |-
      return x * 100.0f;

  # Battery Capacity Setting                    Ah       1B    104 1 R/W
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} battery capacity setting"
    use_write_multiple: true
    address: 104
    register_type: holding
    value_type: U_WORD
    min_value: 50.0
    max_value: 1000.0
    step: 1
    unit_of_measurement: "Ah"
    icon: mdi:battery-outline

select:
  # AC Output Frequency                          0=50Hz, 1=60Hz  123 1 R/W
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} ac frequency"
    use_write_multiple: true
    address: 123
    value_type: U_WORD
    icon: mdi:cosine-wave
    optionsmap:
      "50Hz": 0
      "60Hz": 1

  # Operation Mode Setting                       0=Battery, 1=Hybrid, 2=Grid-Tie  150 1 R/W
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} operation mode"
    use_write_multiple: true
    address: 150
    value_type: U_WORD
    icon: mdi:cog
    optionsmap:
      "Battery Mode": 0
      "Hybrid Mode": 1
      "Grid-Tie Mode": 2

switch:
  # Charge from AC Enable/Disable                0/1      120 1 R/W
  - platform: modbus_controller
    modbus_controller_id: lumentree0
    name: "${name} ac charging"
    use_write_multiple: true
    address: 120
    register_type: holding
    bitmask: 1
    icon: mdi:battery-charging-outline


button:
  # Battery Settings Reset (writes 5 zeros to register 100)
  - platform: template
    name: "${name} reset battery settings"
    icon: mdi:battery-sync
    on_press:
      then:
        - lambda: |-
            auto cmd = esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(id(lumentree0), 100, 5, {0, 0, 0, 0, 0});
            id(lumentree0)->queue_command(cmd);

